#!/bin/bash -eu

: "${REF:="/usr/share/jenkins/ref"}"

# compare if version1 < version2
versionLT() {
    local v1="$1"
    local v2="$2"
    
    # Input validation
    if [ -z "$v1" ] || [ -z "$v2" ]; then
        return 1  # Invalid input, assume not less than
    fi
    
    # Quick equality check
    if [ "$v1" = "$v2" ]; then
        return 1
    fi
    
    # Normalize Jenkins version format with error handling
    normalize_jenkins_version() {
        local version="$1"
        local main_version qualifier
        
        if [[ "$version" == *"-"* ]]; then
            main_version="${version%%-*}"
            qualifier="${version#*-}"
        else
            main_version="$version"
            qualifier=""
        fi
        
        # More conservative normalization - only remove trailing .0 from obvious cases
        if [[ "$main_version" =~ ^[0-9]+(\.[0-9]+)*\.0+$ ]]; then
            while [[ "$main_version" == *.0 ]] && [[ "$main_version" == *.*.* ]]; do
                main_version="${main_version%.0}"
            done
        fi
        
        if [ -n "$qualifier" ]; then
            echo "${main_version}-${qualifier}"
        else
            echo "$main_version"
        fi
    }
    
    # More robust qualifier detection with fallbacks
    is_jenkins_build_qualifier() {
        local qualifier="$1"
        # Primary pattern: X.vYYY format
        [[ "$qualifier" =~ ^[0-9]+\.v[a-zA-Z0-9_]+$ ]] || \
        # Secondary patterns for Jenkins
        [[ "$qualifier" =~ ^[0-9]+\.v[a-zA-Z0-9_-]+$ ]] || \
        # Backup: anything starting with number.v
        [[ "$qualifier" =~ ^[0-9]+\.v ]]
    }
    
    is_semver_prerelease() {
        local qualifier="$1"
        # Known pre-release identifiers
        [[ "$qualifier" =~ ^(alpha|beta|rc|snapshot|dev|test|milestone|m)([.-]?[0-9]*)?$ ]] || \
        [[ "$qualifier" =~ ^(pre|preview|canary|nightly)([.-]?[0-9]*)?$ ]]
    }
    
    local norm_v1 norm_v2
    norm_v1=$(normalize_jenkins_version "$v1") 
    norm_v2=$(normalize_jenkins_version "$v2")
    
    if [ "$norm_v1" = "$norm_v2" ]; then
        return 1
    fi
    
    local main_v1 qual_v1 main_v2 qual_v2
    
    if [[ "$norm_v1" == *"-"* ]]; then
        main_v1="${norm_v1%%-*}"
        qual_v1="${norm_v1#*-}"
    else
        main_v1="$norm_v1"
        qual_v1=""
    fi
    
    if [[ "$norm_v2" == *"-"* ]]; then
        main_v2="${norm_v2%%-*}"
        qual_v2="${norm_v2#*-}"
    else
        main_v2="$norm_v2"
        qual_v2=""
    fi
    
    # Compare main versions with fallback
    if [ "$main_v1" != "$main_v2" ]; then
        local sorted_first
        # Try sort -V first, fallback to basic sort if needed
        if command -v sort >/dev/null 2>&1 && sort -V /dev/null >/dev/null 2>&1; then
            sorted_first=$(printf "%s\n%s\n" "$main_v1" "$main_v2" | sort -V | head -n1)
        else
            # Fallback to basic lexicographic sort (less accurate but works)
            sorted_first=$(printf "%s\n%s\n" "$main_v1" "$main_v2" | sort | head -n1)
        fi
        [ "$sorted_first" = "$main_v1" ]
        return $?
    fi
    
    # Enhanced qualifier comparison with conservative defaults
    if [ -z "$qual_v1" ] && [ -n "$qual_v2" ]; then
        if is_semver_prerelease "$qual_v2"; then
            return 1  # release > pre-release
        elif is_jenkins_build_qualifier "$qual_v2"; then
            return 0  # base < build
        else
            # Conservative default: treat unknown qualifiers as Jenkins build qualifiers
            # This covers the issue #1456 case and is safer than guessing
            return 0  
        fi
    elif [ -n "$qual_v1" ] && [ -z "$qual_v2" ]; then
        if is_semver_prerelease "$qual_v1"; then
            return 0  # pre-release < release  
        elif is_jenkins_build_qualifier "$qual_v1"; then
            return 1  # build > base
        else
            # Conservative default
            return 1
        fi
    elif [ -n "$qual_v1" ] && [ -n "$qual_v2" ]; then
        # Both have qualifiers - use sort with fallback
        local sorted_first
        if command -v sort >/dev/null 2>&1 && sort -V /dev/null >/dev/null 2>&1; then
            sorted_first=$(printf "%s\n%s\n" "$qual_v1" "$qual_v2" | sort -V | head -n1)
        else
            sorted_first=$(printf "%s\n%s\n" "$qual_v1" "$qual_v2" | sort | head -n1)
        fi
        [ "$sorted_first" = "$qual_v1" ]
        return $?
    fi
    
    return 1
}

# returns a plugin version from a plugin archive
get_plugin_version() {
    local archive; archive=$1
    local version; version=$(unzip -p "$archive" META-INF/MANIFEST.MF | grep "^Plugin-Version: " | sed -e 's#^Plugin-Version: ##')
    version=${version%%[[:space:]]}
    echo "$version"
}

# Copy files from /usr/share/jenkins/ref into $JENKINS_HOME
# So the initial JENKINS-HOME is set with expected content.
# Don't override, as this is just a reference setup, and use from UI
# can then change this, upgrade plugins, etc.
copy_reference_file() {
    f="${1%/}"
    b="${f%.override}"
    rel="${b#"$REF/"}"
    version_marker="${rel}.version_from_image"
    dir=$(dirname "${rel}")
    local action;
    local reason;
    local container_version;
    local image_version;
    local marker_version;
    local log; log=false
    if [[ ${rel} == plugins/*.jpi ]]; then
        container_version=$(get_plugin_version "$JENKINS_HOME/${rel}")
        image_version=$(get_plugin_version "${f}")
        if [[ -e $JENKINS_HOME/${version_marker} ]]; then
            marker_version=$(cat "$JENKINS_HOME/${version_marker}")
            if versionLT "$marker_version" "$container_version"; then
                if ( versionLT "$container_version" "$image_version" && [[ -n $PLUGINS_FORCE_UPGRADE ]]); then
                    action="UPGRADED"
                    reason="Manually upgraded version ($container_version) is older than image version $image_version"
                    log=true
                else
                    action="SKIPPED"
                    reason="Installed version ($container_version) has been manually upgraded from initial version ($marker_version)"
                    log=true
                fi
            else
                if [[ "$image_version" == "$container_version" ]]; then
                    action="SKIPPED"
                    reason="Version from image is the same as the installed version $image_version"
                else
                    if versionLT "$image_version" "$container_version"; then
                        action="SKIPPED"
                        log=true
                        reason="Image version ($image_version) is older than installed version ($container_version)"
                    else
                        action="UPGRADED"
                        log=true
                        reason="Image version ($image_version) is newer than installed version ($container_version)"
                    fi
                fi
            fi
        else
            if [[ -n "$TRY_UPGRADE_IF_NO_MARKER" ]]; then
                if [[ "$image_version" == "$container_version" ]]; then
                    action="SKIPPED"
                    reason="Version from image is the same as the installed version $image_version (no marker found)"
                    # Add marker for next time
                    echo "$image_version" > "$JENKINS_HOME/${version_marker}"
                else
                    if versionLT "$image_version" "$container_version"; then
                        action="SKIPPED"
                        log=true
                        reason="Image version ($image_version) is older than installed version ($container_version) (no marker found)"
                    else
                        action="UPGRADED"
                        log=true
                        reason="Image version ($image_version) is newer than installed version ($container_version) (no marker found)"
                    fi
                fi
            fi
        fi
        if [[ ! -e $JENKINS_HOME/${rel} || "$action" == "UPGRADED" || $f = *.override ]]; then
            action=${action:-"INSTALLED"}
            log=true
            mkdir -p "$JENKINS_HOME/${dir}"
            cp -pr "${f}" "$JENKINS_HOME/${rel}";
            # pin plugins on initial copy
            touch "$JENKINS_HOME/${rel}.pinned"
            echo "$image_version" > "$JENKINS_HOME/${version_marker}"
            reason=${reason:-$image_version}
        else
            action=${action:-"SKIPPED"}
        fi
    else
        if [[ ! -e $JENKINS_HOME/${rel} || $f = *.override ]]
        then
            action="INSTALLED"
            log=true
            mkdir -p "$JENKINS_HOME/${dir}"
            cp -pr "$(realpath "${f}")" "$JENKINS_HOME/${rel}";
        else
            action="SKIPPED"
        fi
    fi
    if [[ -n "$VERBOSE" || "$log" == "true" ]]; then
        if [ -z "$reason" ]; then
            echo "$action $rel" >> "$COPY_REFERENCE_FILE_LOG"
        else
            echo "$action $rel : $reason" >> "$COPY_REFERENCE_FILE_LOG"
        fi
    fi
}

# Retries a command a configurable number of times with backoff.
#
# The retry count is given by ATTEMPTS (default 60), the initial backoff
# timeout is given by TIMEOUT in seconds (default 1.)
#
function retry_command() {
  local max_attempts=${ATTEMPTS-3}
  local timeout=${TIMEOUT-1}
  local success_timeout=${SUCCESS_TIMEOUT-1}
  local max_success_attempt=${SUCCESS_ATTEMPTS-1}
  local attempt=0
  local success_attempt=0
  local exitCode=0

  while (( attempt < max_attempts ))
  do
    set +e
    "$@"
    exitCode=$?
    set -e

    if [[ $exitCode == 0 ]]
    then
      success_attempt=$(( success_attempt + 1 ))
      if (( success_attempt >= max_success_attempt))
      then
        break
      else
        sleep "$success_timeout"
        continue
      fi
    fi

    echo "$(date -u '+%T') Failure ($exitCode) Retrying in $timeout seconds..." 1>&2
    sleep "$timeout"
    success_attempt=0
    attempt=$(( attempt + 1 ))
    timeout=$(( timeout ))
  done

  if [[ $exitCode != 0 ]]
  then
    echo "$(date -u '+%T') Failed in the last attempt ($*)" 1>&2
  fi

  return $exitCode
}
